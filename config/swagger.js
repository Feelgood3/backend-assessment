const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const path = require('path');

const { version } = require('../package.json');

const routesApi = path.join(__dirname, '../api/**/**.controller.js');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'FAVS API BACK END DOCUMENTATION',
      version,
      description: 'You will find how to use the necessary routes and controllers of the Favs back end.',
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT',
      },
      contact: {
        name: 'Sergio Moncada Ojara',
        url: 'https://www.linkedin.com/in/sergiomoncadao',
        email: 'sergiomoncadao@gmail.com',
      },
    },
    servers: [
      {
        url: `http://localhost:${process.env.PORT}`,
        description: 'Local server',
      },
    ],
    components: {
      schemas: {
        favsList: {
          type: 'object',
          properties: {
            id: {
              type: 'ObjectId',
              description: 'Autogenerated ID for the favsList',
              example: '6324243ee83334ef522fff544d',
            },
            name: {
              type: 'string',
              description: 'Name of the Favs list',
              example: 'My favorite books',
            },
            owner: {
              type: 'object',
              properties: {
                email: {
                  type: 'string',
                  description: 'email of the favsList Owner',
                  example: 'sergiomoncadao@gmail.com',
                },
                password: {
                  type: 'string',
                  description: 'Password of the favsList Owner',
                  example: 'passwordTest123',
                },
                favLists: {
                  type: 'array',
                  description: 'Array of all the user favLists',
                  example: ['My favorite books', 'Videos to watch later', 'Family memories'],
                },
              },
            },
            favsItems: {
              type: 'object',
              properties: {
                title: {
                  type: 'string',
                  description: 'Title of the Favs',
                  example: 'To Kill a Mockingbird',
                },
                description: {
                  type: 'string',
                  description: 'Description of the Favs item',
                  example: 'The best book ever made',
                },
                link: {
                  type: 'string',
                  description: 'Relevant link to my Favs item',
                  example: 'https://en.wikipedia.org/wiki/To_Kill_a_Mockingbird',
                },
                favList: {
                  type: 'object',
                  description: 'FavsList where this Favs item is located',
                  example: 'My Favorite Books',
                },
                owner: {
                  type: 'object',
                  description: 'Owner of the Favs item',
                  example: 'sergiomoncadao@gmail.com',
                },
              },
            },
          },
        },
        allFavsLists: {
          type: 'array',
          description: 'An array of all existing FavsLists',
          items: {
            type: 'object',
            properties: {
              name: {
                type: 'string',
                description: 'Name of the Favs list',
                example: 'My favorite books',
              },
              owner: {
                type: 'string',
                description: 'email of the favsList Owner',
                example: 'sergiomoncadao@gmail.com',
              },
              favsItems: {
                type: 'string',
                description: 'Favs contained in the favsLists',
                example: '[To Kill a Mockingbird, Ensayo sobre la ceguera, The Psychoanalyst]',
              },
            },
          },
        },
        favsNotFound: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Unable to find Favs',
              example: 'Favs not found',
            },
          },
        },
        notAuthorized: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Unable to authorize request due to not being logged in',
              example: 'No token',
            },
          },
        },
        success: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Request completed successfully',
              example: 'Favs list Successfully created',
            },
          },
        },
        badRequest: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Invalid request',
              example: 'Bad request',
            },
            errors: {
              type: 'array',
              description: 'Errors of the request',
              example: [
                {
                  field: 'email',
                  message: 'Email is required',
                },
              ],
            },
          },
        },
        serverError: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Unable to connect to the server',
              example: 'Internal server error',
            },
          },
        },
      },
      requestBodies: {
        favsRequest: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              description: 'name of the fav list',
              example: 'List 1',
            },
            favItem: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  title: {
                    type: 'string',
                    description: 'title of the fav',
                    example: 'My first fav',
                  },
                  description: {
                    type: 'string',
                    description: 'description of the fav',
                    example: 'This is my fav',
                  },
                  link: {
                    type: 'string',
                    description: 'link of the fav',
                    example: 'http://google.com',
                  },
                },
              },
            },
          },
        },
      },
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          in: 'header',
        },
      },
    },
  },
  apis: [routesApi], // files containing annotations as above
};

const swaggerSpec = swaggerJsdoc(options);

function swaggerDocs(app, port) {
  app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));

  // Docs in JSON format
  app.get('/docs.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(swaggerSpec);
  });

  console.log(`Swagger docs running on http://localhost:${port}/docs`);
}

module.exports = swaggerDocs;
